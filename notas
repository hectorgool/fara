

play.api.UnexpectedException: Unexpected exception[SQLTimeoutException: Timeout after 1000ms of waiting for a connection.]

=> configuracion de slick

http://stackoverflow.com/questions/33737889/play-slick-sqltimeoutexception-timeout-after-1001ms-of-waiting-for-a-connectio





@(emailForm: Form[String])(implicit request: RequestHeader, messages: Messages)
@import b3.vertical.fieldConstructor
@main("Forgot Password") {
    @*
    @tags.alertFromRequest(request, "error")
    *@
    @b3.form(controllers.routes.ApplicationController.handleForgotPassword) {
        <fieldset>
            <legend>@Messages("forgot.title")</legend>
            @b3.text( 
                emailForm("email"), 
                '_hiddenLabel -> Messages("field.email"), 
                'placeholder -> "your@email.com", 
                'autofocus -> true 
            )
            @b3.submit('class -> "btn btn-primary btn-block"){ @Messages("submit") }
        </fieldset>
    }

    @*
    @views.html.tags.signInHelper()
    *@
}


dbConfigProvider


case class Message(
senderId: Id[UserTable],
content:
String,
ts: DateTime,
roomId: Option[Id[RoomTable]] = None,
toId: Option[Id[UserTable]] = None,
id: Id[MessageTable]
= Id(0L) )


   implicit val GetUserId    =
     GetResult(r => Id[UserTable](r.nextLong))

   implicit val GetMessageId =
     GetResult(r => Id[MessageTable](r.nextLong))

   implicit val GetOptionalUserId =
     GetResult(r => r.nextLongOption.map(id => Id[UserTable](id)))

   implicit val GetOptionalRoomId =
     GetResult(r => r.nextLongOption.map(id => Id[RoomTable](id)))

   implicit val GetMessage = GetResult(r =>
      Message(senderId  = r.<<,
              content   = r.<<,
              ts        = r.<<,
              id        = r.<<,
              roomId    = r.<<?,
              toId      = r.<<?) )